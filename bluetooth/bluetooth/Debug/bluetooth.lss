
bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087e  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000747  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ad  00000000  00000000  0000121d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000015cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f5  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001be  00000000  00000000  00001a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001c1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  78:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <uart_init>:
{
	while(*str > 0)
	{
		receive_bits(*str++);
	}
}
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  8e:	86 e0       	ldi	r24, 0x06	; 6
  90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  94:	08 95       	ret

00000096 <receive_bits>:
  96:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9a:	88 23       	and	r24, r24
  9c:	e4 f7       	brge	.-8      	; 0x96 <receive_bits>
  9e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a2:	08 95       	ret

000000a4 <led_blink>:

void led_blink()
{
	PORTB |= (1 << LED);
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	80 e7       	ldi	r24, 0x70	; 112
  ae:	92 e0       	ldi	r25, 0x02	; 2
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <led_blink+0xc>
  b8:	00 c0       	rjmp	.+0      	; 0xba <led_blink+0x16>
  ba:	00 00       	nop
	_delay_ms(LED_DELAY);
	PORTB &= ~(1 << LED);
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	80 e7       	ldi	r24, 0x70	; 112
  c6:	92 e0       	ldi	r25, 0x02	; 2
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <led_blink+0x24>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <led_blink+0x2e>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <main>:
void transmit_string(char*);
void led_blink();

int main(void)
{
    DDRC |= (1 << RELAY1) | (1 << RELAY2);
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	83 60       	ori	r24, 0x03	; 3
  da:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << 1);
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 0);
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (1 << RELAY1) | (1 << RELAY2);
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	88 b9       	out	0x08, r24	; 8
	DDRB = (1 << 3) | (1 << LED);
  ee:	89 e0       	ldi	r24, 0x09	; 9
  f0:	84 b9       	out	0x04, r24	; 4
	
	uart_init(UBRR_VAL);
  f2:	83 e3       	ldi	r24, 0x33	; 51
  f4:	0e 94 40 00 	call	0x80	; 0x80 <uart_init>
	
	for(uint8_t i = 0; i < 4; i++)
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	03 c0       	rjmp	.+6      	; 0x102 <main+0x2c>
	{
		led_blink();
  fc:	0e 94 52 00 	call	0xa4	; 0xa4 <led_blink>
	PORTC |= (1 << RELAY1) | (1 << RELAY2);
	DDRB = (1 << 3) | (1 << LED);
	
	uart_init(UBRR_VAL);
	
	for(uint8_t i = 0; i < 4; i++)
 100:	cf 5f       	subi	r28, 0xFF	; 255
 102:	c4 30       	cpi	r28, 0x04	; 4
 104:	d8 f3       	brcs	.-10     	; 0xfc <main+0x26>
	char val;
	
    while (1) 
    {
		
		val = receive_bits();
 106:	0e 94 4b 00 	call	0x96	; 0x96 <receive_bits>

		switch(val)
 10a:	82 33       	cpi	r24, 0x32	; 50
 10c:	69 f0       	breq	.+26     	; 0x128 <main+0x52>
 10e:	18 f4       	brcc	.+6      	; 0x116 <main+0x40>
 110:	81 33       	cpi	r24, 0x31	; 49
 112:	31 f0       	breq	.+12     	; 0x120 <main+0x4a>
 114:	f8 cf       	rjmp	.-16     	; 0x106 <main+0x30>
 116:	83 33       	cpi	r24, 0x33	; 51
 118:	59 f0       	breq	.+22     	; 0x130 <main+0x5a>
 11a:	84 33       	cpi	r24, 0x34	; 52
 11c:	69 f0       	breq	.+26     	; 0x138 <main+0x62>
 11e:	f3 cf       	rjmp	.-26     	; 0x106 <main+0x30>
		{
			case '1':
				PORTC |= (1 << RELAY1);
 120:	88 b1       	in	r24, 0x08	; 8
 122:	81 60       	ori	r24, 0x01	; 1
 124:	88 b9       	out	0x08, r24	; 8
				break;
 126:	ef cf       	rjmp	.-34     	; 0x106 <main+0x30>
			case '2':
				PORTC &= ~(1 << RELAY1);
 128:	88 b1       	in	r24, 0x08	; 8
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	88 b9       	out	0x08, r24	; 8
				break;
 12e:	eb cf       	rjmp	.-42     	; 0x106 <main+0x30>
			case '3':
				PORTC |= (1 << RELAY2);
 130:	88 b1       	in	r24, 0x08	; 8
 132:	82 60       	ori	r24, 0x02	; 2
 134:	88 b9       	out	0x08, r24	; 8
				break;
 136:	e7 cf       	rjmp	.-50     	; 0x106 <main+0x30>
			case '4':
				PORTC &= ~(1 << RELAY2);
 138:	88 b1       	in	r24, 0x08	; 8
 13a:	8d 7f       	andi	r24, 0xFD	; 253
 13c:	88 b9       	out	0x08, r24	; 8
				break;		
 13e:	e3 cf       	rjmp	.-58     	; 0x106 <main+0x30>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
